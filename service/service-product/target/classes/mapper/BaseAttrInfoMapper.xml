<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper SYSTEM "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--非必要属性！namespace 接口全路径！-->
<mapper namespace="com.atguigu.gmall.product.mapper.BaseAttrInfoMapper">
    <!--返回结果集映射
        id: 返回结果集的唯一标识
        type: 返回结果集的数据类型
        autoMapping: 自动映射{数据库表的字段}
    -->
    <resultMap id="BaseAttrInfoMap" type="com.atguigu.gmall.model.product.BaseAttrInfo" autoMapping="true">
        <!--
            id: 表示主键
            column: 执行sql 语句之后显示的字段
            property：实体类的属性
        -->
        <!--        <id column="id" property="id"></id>-->
        <!--        &lt;!&ndash;-->
        <!--            result 除主键之外的字段-->
        <!--        &ndash;&gt;-->
        <!--        <result column="attr_name" property="attrName"></result>-->
        <!--
            平台属性：平台属性值  关系 1:n mybatis 如果配置 这种关系?
            collection 配置一对多！
            property：实体类的属性
            ofType: 数据类型
            autoMapping： 弊端不能有重复字段！起别名！
        -->
        <!--通过id 主键 来告诉我们谁是1 , 当前一个对象 -->
        <id column="id" property="id"></id>

        <!--配置多的对象！-->
        <collection property="attrValueList" ofType="com.atguigu.gmall.model.product.BaseAttrValue" autoMapping="true">
            <id property="id" column="attr_value_id"></id>
        </collection>
        <!--<association property=""></association> 多对1-->
    </resultMap>

    <!--CURD 标签！-->
    <!--
        id: 方法名称
        resultMap: 返回结果集映射
        $ , # 区别?
        $: 有sql 注入风险 不建议使用！
        #: 没有风险
    -->
    <select id="selectBaseAttrInfoList" resultMap="BaseAttrInfoMap">
        select bai.id,
               bai.category_level,
               bai.category_id,
               bai.attr_name,
               bav.id attr_value_id,
               bav.value_name,
               bav.attr_id
        from base_attr_info bai
                 inner join base_attr_value bav on bai.id = bav.attr_id
        <where>
            <if test="category1Id != null and category1Id != 0">
                or bai.category_id = #{category1Id} and bai.category_level = 1
            </if>
            <if test="category2Id != null and category2Id != 0">
                or bai.category_id = #{category2Id} and bai.category_level = 2
            </if>
            <if test="category3Id != null and category3Id != 0">
                or bai.category_id = #{category3Id} and bai.category_level = 3
            </if>
        </where>
        order by bai.category_level , bai.id
    </select>

    <!--根据skuId查询平台属性，属性值数据-->
    <select id="selectBaseAttrInfoListBySkuId" resultMap="BaseAttrInfoMap">
           SELECT
                bai.id,
                bai.attr_name,
                bai.category_id,
                bai.category_level,
                bav.id attr_value_id,
                bav.value_name,
                bav.attr_id
            FROM
            base_attr_info bai
            INNER JOIN base_attr_value bav ON bai.id = bav.attr_id
            INNER JOIN sku_attr_value sav ON sav.value_id = bav.id
            WHERE
            sav.sku_id = #{skuId}
    </select>
</mapper>